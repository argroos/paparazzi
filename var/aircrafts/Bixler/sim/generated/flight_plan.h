/* This file has been generated by gen_flight_plan from /home/argroos/paparazzi/conf/flight_plans/versatile.xml */
/* Version v6.4.0_stable */
/* Please DO NOT EDIT */

#ifndef FLIGHT_PLAN_H
#define FLIGHT_PLAN_H

#include "std.h"
#include "generated/modules.h"
#include "modules/core/abi.h"
#include "autopilot.h"

extern float roll_step;

#include "modules/datalink/datalink.h"

#define FLIGHT_PLAN_NAME "Versatile"
#define NAV_DEFAULT_ALT 260 /* nominal altitude of the flight plan */
#define NAV_UTM_EAST0 360286
#define NAV_UTM_NORTH0 4813592
#define NAV_UTM_ZONE0 31
#define NAV_LAT0 434622000 /* 1e7deg */
#define NAV_LON0 12729000 /* 1e7deg */
#define NAV_ALT0 185000 /* mm above msl */
#define NAV_MSL0 51850 /* mm, EGM96 geoid-height (msl) over ellipsoid */
#define QFU 270.0
#define WP_dummy 0
#define WP_HOME 1
#define WP_STDBY 2
#define WP_1 3
#define WP_2 4
#define WP_MOB 5
#define WP_S1 6
#define WP_S2 7
#define WP_AF 8
#define WP_TD 9
#define WP_BASELEG 10
#define WP__1 11
#define WP__2 12
#define WP__3 13
#define WP__4 14
#define WP_CLIMB 15
#define WAYPOINTS_UTM { \
 {0.0, 0.0, 260},\
 {0.0, 0.0, 260},\
 {20.0, 80.0, 260},\
 {44.8, 102.2, 260},\
 {-63.5, 122.9, 260},\
 {-11.5, -21.2, 260},\
 {-151.6, 80.4, 260},\
 {180.1, 214.9, 260},\
 {200.0, -10.0, 215.0},\
 {80.0, 20.0, 185.0},\
 {26.9, -23.0, 260},\
 {-100.0, 0.0, 260},\
 {-100.0, 200.0, 260},\
 {100.0, 200.0, 260},\
 {100.0, 0.0, 260},\
 {-122.5, 35.4, 260},\
};
#define WAYPOINTS_ENU { \
 {0.00, -0.00, 75.00}, /* ENU in meters  */ \
 {0.00, -0.00, 75.00}, /* ENU in meters  */ \
 {18.34, 80.41, 75.00}, /* ENU in meters  */ \
 {42.68, 103.13, 75.00}, /* ENU in meters  */ \
 {-66.05, 121.58, 75.00}, /* ENU in meters  */ \
 {-11.06, -21.44, 75.00}, /* ENU in meters  */ \
 {-153.27, 77.25, 75.00}, /* ENU in meters  */ \
 {175.64, 218.63, 74.99}, /* ENU in meters  */ \
 {200.20, -5.85, 30.00}, /* ENU in meters  */ \
 {79.58, 21.66, -0.00}, /* ENU in meters  */ \
 {27.38, -22.44, 75.00}, /* ENU in meters  */ \
 {-100.00, -2.07, 75.00}, /* ENU in meters  */ \
 {-104.15, 197.92, 75.00}, /* ENU in meters  */ \
 {95.85, 202.07, 75.00}, /* ENU in meters  */ \
 {100.00, 2.07, 75.00}, /* ENU in meters  */ \
 {-123.23, 32.86, 75.00}, /* ENU in meters  */ \
};
#define WAYPOINTS_LLA { \
 {.lat=434621999, .lon=12729000, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434621999, .lon=12729000, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434629237, .lon=12731266, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434631281, .lon=12734273, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434632942, .lon=12720838, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434620070, .lon=12727633, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434628953, .lon=12710061, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434641677, .lon=12750703, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434621473, .lon=12753737, .alt=215000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434623949, .lon=12738833, .alt=185000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434619980, .lon=12732382, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434621813, .lon=12716643, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434639813, .lon=12716130, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434640187, .lon=12740843, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434622186, .lon=12741356, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=434624957, .lon=12713772, .alt=260000}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
};
#define WAYPOINTS_LLA_WGS84 { \
 {.lat=434621999, .lon=12729000, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434621999, .lon=12729000, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434629237, .lon=12731266, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434631281, .lon=12734273, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434632942, .lon=12720838, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434620070, .lon=12727633, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434628953, .lon=12710061, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434641677, .lon=12750703, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434621473, .lon=12753737, .alt=266850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434623949, .lon=12738833, .alt=236850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434619980, .lon=12732382, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434621813, .lon=12716643, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434639813, .lon=12716130, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434640187, .lon=12740843, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434622186, .lon=12741356, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=434624957, .lon=12713772, .alt=311850}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
};
#define WAYPOINTS_GLOBAL { \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
};
#define NB_WAYPOINT 16
#define FP_BLOCKS { \
 "Wait GPS" , \
 "Geo init" , \
 "Holding point" , \
 "Takeoff" , \
 "Standby" , \
 "Line 1-2" , \
 "Figure 8 around wp 1" , \
 "Oval 1-2" , \
 "MOB" , \
 "Auto pitch (circle wp 1)" , \
 "Climb 75% throttle" , \
 "Climb 0m/s" , \
 "Climb 1m/s" , \
 "Climb nav_climb m/s" , \
 "Circle 0% throttle" , \
 "Oval 0% throttle" , \
 "Route 1-2" , \
 "Stack wp 2" , \
 "Route 2-1" , \
 "Stack wp 1" , \
 "Glide 1-2" , \
 "Survey S1-S2" , \
 "Land Right AF-TD" , \
 "Land Left AF-TD" , \
 "land" , \
 "final" , \
 "flare" , \
 "Steps roll -10, +10" , \
 "Steps roll -20, +20" , \
 "Steps roll from var" , \
 "Steps pitch -10, +10" , \
 "Heading 30" , \
 "For loop (circles wp 1)" , \
 "Test datalink (go to wp 2)" , \
 "Fly in Square" , \
 "Come back wp 1" , \
 "HOME" , \
}
#define NB_BLOCK 37
#define GROUND_ALT 185.
#define GROUND_ALT_CM 18500
#define SECURITY_HEIGHT 25.
#define SECURITY_ALT 210.
#define HOME_MODE_HEIGHT 50.
#define MAX_DIST_FROM_HOME 1500.


#ifndef FBW

#define SECTOR_SQUARE_NB 4
#define SECTOR_SQUARE { 11, 12, 13, 14 }
static inline bool InsideSquare(float _x, float _y) {
  uint8_t i, j;
  bool c = false;
  const uint8_t nb_pts = SECTOR_SQUARE_NB;
  const uint8_t wps_id[] = SECTOR_SQUARE;

  for (i = 0, j = nb_pts - 1; i < nb_pts; j = i++) {
    if (((WaypointY(wps_id[i]) > _y) != (WaypointY(wps_id[j]) > _y)) &&
       (_x < (WaypointX(wps_id[j])-WaypointX(wps_id[i])) * (_y-WaypointY(wps_id[i])) / (WaypointY(wps_id[j])-WaypointY(wps_id[i])) + WaypointX(wps_id[i]))) {
      if (c == TRUE) { c = FALSE; } else { c = TRUE; }
    }
  }
  return c;
}


#endif

#ifdef NAV_C

float roll_step = 15.;

static inline void auto_nav_init(void) {
}

static inline void auto_nav(void) {
  switch (nav_block) {
    Block(0) // Wait GPS
    switch(nav_stage) {
      Stage(0)
        autopilot.kill_throttle = 1;
        NextStage();
      Label(while_1)
      Stage(1)
        if (! (!(GpsFixValid()))) Goto(endwhile_2) else NextStageAndBreak();
        Stage(2)
          Goto(while_1)
        Label(endwhile_2)
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(1) // Geo init
    switch(nav_stage) {
      Label(while_3)
      Stage(0)
        if (! (LessThan(NavBlockTime(),10))) Goto(endwhile_4) else NextStageAndBreak();
        Stage(1)
          Goto(while_3)
        Label(endwhile_4)
      Stage(2)
        NavSetGroundReferenceHere();
        NextStage();
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(2) // Holding point
    switch(nav_stage) {
      Stage(0)
        autopilot.kill_throttle = 1;
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalThrottleMode(9600*(0));
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(3) // Takeoff
    if ((nav_block != 4) && (GetPosAlt()>(GetAltRef()+25))) { GotoBlock(4); return; }
    switch(nav_stage) {
      Stage(0)
        autopilot.kill_throttle = 0;
        NextStage();
      Stage(1)
        if (NavApproaching(15,CARROT)) {
          NextStageAndBreakFrom(15);
        } else {
          NavGotoWaypoint(15);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(15), 0.);
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(4) // Standby
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(2), 0.);
        NavCircleWaypoint(2, nav_radius);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(5) // Line 1-2
    switch(nav_stage) {
      Stage(0)
        nav_line_setup();
        NextStage();
      Stage(1)
        if (! (nav_line_run(WP_1, WP_2, nav_radius))) {
          NextStage();
        } else {
          break;
        }
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(6) // Figure 8 around wp 1
    switch(nav_stage) {
      Stage(0)
        nav_eight_init();
        NextStageAndBreak();
      Stage(1)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        Eight(3, 4, nav_radius);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(7) // Oval 1-2
    switch(nav_stage) {
      Stage(0)
        nav_oval_init();
        NextStageAndBreak();
      Stage(1)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        Oval(3, 4, nav_radius);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(8) // MOB
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_MOB);
        NextStage();
      Stage(1)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(5), 0.);
        NavCircleWaypoint(5, 100);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(9) // Auto pitch (circle wp 1)
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoPitchMode(9600*(0.700000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        NavCircleWaypoint(3, 75);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(10) // Climb 75% throttle
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(10));
        NavVerticalThrottleMode(9600*(0.750000));
        NavCircleWaypoint(3, (50+((GetPosAlt()-GetAltRef())/2)));
        if (((10>PowerVoltage())||(GetPosAlt()>(GetAltRef()+1350)))) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(11) // Climb 0m/s
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(0);
        NavCircleWaypoint(3, nav_radius);
        if ((10>PowerVoltage())) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(12) // Climb 1m/s
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(5));
        NavVerticalClimbMode(1);
        NavCircleWaypoint(3, (50+((GetPosAlt()-GetAltRef())/2)));
        if ((10>PowerVoltage())) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(13) // Climb nav_climb m/s
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(nav_climb);
        NavCircleWaypoint(3, nav_radius);
        if (((10>PowerVoltage())||(GetPosAlt()>(GetAltRef()+1350)))) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(14) // Circle 0% throttle
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(fp_pitch));
        NavVerticalThrottleMode(9600*(0.000000));
        NavCircleWaypoint(3, nav_radius);
        if (((GetAltRef()+50)>GetPosAlt())) {
          NextStageAndBreak()
        }
        break;
      Stage(1)
        GotoBlock(4);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(15) // Oval 0% throttle
    switch(nav_stage) {
      Stage(0)
        nav_oval_init();
        NextStageAndBreak();
      Stage(1)
        NavVerticalAutoThrottleMode(RadOfDeg(fp_pitch));
        NavVerticalThrottleMode(9600*(0.000000));
        Oval(3, 4, nav_radius);
        if (((GetAltRef()+50)>GetPosAlt())) {
          NextStageAndBreak()
        }
        break;
      Stage(2)
        GotoBlock(4);
        break;
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(16) // Route 1-2
    switch(nav_stage) {
      Stage(0)
        if (NavApproachingFrom(4,3,0)) {
          NextStageAndBreakFrom(4);
        } else {
          NavSegment(3, 4);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(4), 0.);
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(17) // Stack wp 2
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(4), 0.);
        NavCircleWaypoint(4, 75);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(18) // Route 2-1
    switch(nav_stage) {
      Stage(0)
        if (NavApproachingFrom(3,4,0)) {
          NextStageAndBreakFrom(3);
        } else {
          NavSegment(4, 3);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(19) // Stack wp 1
    switch(nav_stage) {
      Stage(0)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        NavCircleWaypoint(3, 75);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(20) // Glide 1-2
    switch(nav_stage) {
      Stage(0)
        if (NavApproachingFrom(4,3,CARROT)) {
          NextStageAndBreakFrom(4);
        } else {
          NavSegment(3, 4);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavGlide(3, 4);
        }
        break;
      Stage(1)
        GotoBlock(4);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(21) // Survey S1-S2
    switch(nav_stage) {
      Stage(0)
        NavSurveyRectangleInit(6, 7, 150, NS);
        NextStageAndBreak();
      Stage(1)
        NavSurveyRectangle(6, 7);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(22) // Land Right AF-TD
    switch(nav_stage) {
      Stage(0)
        nav_radius = DEFAULT_CIRCLE_RADIUS;
        NextStage();
      Stage(1)
        GotoBlock(24);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(23) // Land Left AF-TD
    switch(nav_stage) {
      Stage(0)
        nav_radius = -(DEFAULT_CIRCLE_RADIUS);
        NextStage();
      Stage(1)
        GotoBlock(24);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(24) // land
    switch(nav_stage) {
      Stage(0)
        nav_compute_baseleg(WP_AF, WP_TD, WP_BASELEG, nav_radius);
        NextStage();
      Stage(1)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(10), 0.);
        NavCircleWaypoint(10, nav_radius);
        if ((NavCircleCount()>0.500000)) {
          NextStageAndBreak()
        }
        break;
      Stage(2)
        v_ctl_auto_throttle_cruise_throttle = V_CTL_AUTO_THROTTLE_MIN_CRUISE_THROTTLE;
        NextStage();
      Stage(3)
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(10), 0.);
        NavCircleWaypoint(10, nav_radius);
        if ((NavQdrCloseTo((DegOfRad(baseleg_out_qdr)-((nav_radius/fabs(nav_radius))*10)))&&(10>fabs((GetPosAlt()-WaypointAlt(WP_BASELEG)))))) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(4)
        NextBlock();
        break;
    }
    break;

    Block(25) // final
    if ((nav_block != 26) && ((GetAltRef()+10)>GetPosAlt())) { GotoBlock(26); return; }
    switch(nav_stage) {
      Stage(0)
        if (NavApproachingFrom(9,8,CARROT)) {
          NextStageAndBreakFrom(9);
        } else {
          NavSegment(8, 9);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavGlide(8, 9);
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(26) // flare
    switch(nav_stage) {
      Stage(0)
        if (NavApproachingFrom(9,8,0)) {
          NextStageAndBreakFrom(9);
        } else {
          NavSegment(8, 9);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalThrottleMode(9600*(0.000000));
        }
        break;
      Stage(1)
        NavAttitude(RadOfDeg(0.000000));
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalThrottleMode(9600*(0.000000));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(27) // Steps roll -10, +10
    switch(nav_stage) {
      Label(while_5)
      Stage(0)
        if (! (TRUE)) Goto(endwhile_6) else NextStageAndBreak();
        Stage(1)
          NavAttitude(RadOfDeg(10.000000));
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>6)) {
            NextStageAndBreak()
          }
          break;
        Stage(2)
          NavAttitude(RadOfDeg(-(10.000000)));
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>6)) {
            NextStageAndBreak()
          }
          break;
        Stage(3)
          Goto(while_5)
        Label(endwhile_6)
      /* Falls through. */
      default:
      Stage(4)
        NextBlock();
        break;
    }
    break;

    Block(28) // Steps roll -20, +20
    switch(nav_stage) {
      Label(while_7)
      Stage(0)
        if (! (TRUE)) Goto(endwhile_8) else NextStageAndBreak();
        Stage(1)
          NavAttitude(RadOfDeg(20.000000));
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>3)) {
            NextStageAndBreak()
          }
          break;
        Stage(2)
          NavAttitude(RadOfDeg(-(20.000000)));
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>3)) {
            NextStageAndBreak()
          }
          break;
        Stage(3)
          Goto(while_7)
        Label(endwhile_8)
      /* Falls through. */
      default:
      Stage(4)
        NextBlock();
        break;
    }
    break;

    Block(29) // Steps roll from var
    switch(nav_stage) {
      Label(while_9)
      Stage(0)
        if (! (TRUE)) Goto(endwhile_10) else NextStageAndBreak();
        Stage(1)
          NavAttitude(RadOfDeg(roll_step));
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>3)) {
            NextStageAndBreak()
          }
          break;
        Stage(2)
          NavAttitude(RadOfDeg(-(roll_step)));
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>3)) {
            NextStageAndBreak()
          }
          break;
        Stage(3)
          Goto(while_9)
        Label(endwhile_10)
      /* Falls through. */
      default:
      Stage(4)
        NextBlock();
        break;
    }
    break;

    Block(30) // Steps pitch -10, +10
    switch(nav_stage) {
      Label(while_11)
      Stage(0)
        if (! (TRUE)) Goto(endwhile_12) else NextStageAndBreak();
        Stage(1)
          NavAttitude(RadOfDeg(0.000000));
          NavVerticalAutoThrottleMode(RadOfDeg(10));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>2)) {
            NextStageAndBreak()
          }
          break;
        Stage(2)
          NavAttitude(RadOfDeg(0.000000));
          NavVerticalAutoThrottleMode(RadOfDeg(-(10)));
          NavVerticalAltitudeMode(250, 0.);
          if ((stage_time>2)) {
            NextStageAndBreak()
          }
          break;
        Stage(3)
          Goto(while_11)
        Label(endwhile_12)
      /* Falls through. */
      default:
      Stage(4)
        NextBlock();
        break;
    }
    break;

    Block(31) // Heading 30
    switch(nav_stage) {
      Stage(0)
        NavHeading(RadOfDeg(30));
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode((GetAltRef()+50), 0.);
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(32) // For loop (circles wp 1)
    switch(nav_stage) {
      static int8_t _var_i;
      static int8_t _var_i_to;
      Stage(0)
        _var_i = 0 - 1;
        _var_i_to = 3;
        INTENTIONAL_FALLTHRU
      Label(for_13)
      Stage(1)
        if (++_var_i > _var_i_to) Goto(endfor_14) else NextStageAndBreak();
        Stage(2)
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(3), 0.);
          NavCircleWaypoint(3, (DEFAULT_CIRCLE_RADIUS+(_var_i*10)));
          if ((NavCircleCount()>1)) {
            NextStageAndBreak()
          }
          break;
        Stage(3)
          Goto(for_13)
        Label(endfor_14)
      Stage(4)
        GotoBlock(4);
        break;
      /* Falls through. */
      default:
      Stage(5)
        NextBlock();
        break;
    }
    break;

    Block(33) // Test datalink (go to wp 2)
    if ((nav_block != 4) && (datalink_time>22)) { GotoBlock(4); return; }
    switch(nav_stage) {
      Stage(0)
        if (NavApproachingFrom(4,2,CARROT)) {
          NextStageAndBreakFrom(4);
        } else {
          NavSegment(2, 4);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(4), 0.);
        }
        break;
      Stage(1)
        if (NavApproachingFrom(2,4,CARROT)) {
          NextStageAndBreakFrom(2);
        } else {
          NavSegment(4, 2);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(2), 0.);
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(34) // Fly in Square
    if ((nav_block != 35) && !(InsideSquare(GetPosX(),GetPosY()))) { GotoBlock(35); return; }
    switch(nav_stage) {
      Stage(0)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode((GetAltRef()+75), 0.);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(35) // Come back wp 1
    if ((nav_block != 34) && InsideSquare(GetPosX(),GetPosY())) { GotoBlock(34); return; }
    switch(nav_stage) {
      Stage(0)
        if (NavApproaching(3,CARROT)) {
          NextStageAndBreakFrom(3);
        } else {
          NavGotoWaypoint(3);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        }
        break;
      Stage(1)
        GotoBlock(34);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(36) // HOME
    switch(nav_stage) {
      Stage(0)
        nav_home();
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    default: break;
  }
}
#endif // NAV_C

#endif // FLIGHT_PLAN_H
