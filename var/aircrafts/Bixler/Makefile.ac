# This file has been generated by gen_aircraft
# Version v6.4.0_stable
# Please DO NOT EDIT
AC_ID=2

$(TARGET).CFLAGS += -Imodules -Iarch/$(ARCH)/modules

####################################################
# makefile target 'sim' for firmware 'fixedwing'
####################################################

ifeq ($(TARGET), sim)

ACTUATORS_DIR = modules/actuators
AHRS_DIR = modules/ahrs
AUTOPILOT_GNC_DIR = modules/autopilot_gnc
AUTOPILOT_GNC_FW_DIR = modules/autopilot_gnc_fw
AUTOPILOT_GUIDED_DIR = modules/autopilot_guided
CONTROL_DIR = modules/control
CORE_DIR = modules/core
DATALINK_DIR = modules/datalink
ENERGY_DIR = modules/energy
FDM_DIR = modules/fdm
FIRMWARES_DIR = modules/firmwares
GPS_DIR = modules/gps
GUIDANCE_DIR = modules/guidance
IMU_DIR = modules/imu
INS_DIR = modules/ins
MATH_DIR = modules/math
MCU_PERIPH_DIR = modules/mcu_periph
NAV_DIR = modules/nav
RADIO_CONTROL_DIR = modules/radio_control
STABILIZATION_DIR = modules/stabilization
TARGETS_DIR = modules/targets

NPS_DIR = nps
SRC_ARCH = arch/$(ARCH)
SRC_MODULES = modules
SRC_BOARD = boards/$(BOARD)
SRC_FIRMWARE = firmwares/fixedwing

include $(PAPARAZZI_SRC)/conf/boards/pc.makefile
include $(PAPARAZZI_SRC)/conf/firmwares/fixedwing.makefile

RADIO_CONTROL_LED ?= none
GPS_LED ?= none
TELEMETRY_FREQUENCY ?= $(PERIODIC_FREQUENCY)
BARO_PERIODIC_FREQUENCY ?= 50
MODEM_BROADCAST ?= TRUE
MODEM_PORT_IN ?= 4243
MODEM_PORT_OUT ?= 4242
MODEM_DEV ?= UDP0
MODEM_DEV_LOWER = $(shell echo $(MODEM_DEV) | tr A-Z a-z)
MODEM_DEV_UPPER = $(shell echo $(MODEM_DEV) | tr a-z A-Z)
WIND_INFO ?= TRUE
PERIODIC_FREQUENCY ?= 60

$(TARGET).CFLAGS += -DUSE_MAGNETOMETER=FALSE

sim.srcs += $(CORE_DIR)/settings.c
sim.srcs += arch/$(ARCH)/$(CORE_DIR)/settings_arch.c
sim.CFLAGS += -DRADIO_CONTROL
ifneq ($(RADIO_CONTROL_LED),none)
sim.CFLAGS += -DRADIO_CONTROL_LED=$(RADIO_CONTROL_LED)
endif
sim.srcs += $(RADIO_CONTROL_DIR)/radio_control.c
sim.CFLAGS += -DNAV
sim.srcs += $(NAV_DIR)/nav_survey_rectangle.c
sim.srcs += $(NAV_DIR)/common_flight_plan.c
sim.srcs += $(SRC_FIRMWARE)/nav.c
sim.CFLAGS += -DPERIPHERALS_AUTO_INIT
sim.srcs += mcu.c

ifneq ($(BOARD), ardrone)
sim.srcs += arch/$(ARCH)/mcu_periph/gpio_arch.c
endif
sim.srcs += arch/$(ARCH)/mcu_arch.c
sim.srcs += math/pprz_stat.c
sim.srcs += math/pprz_orientation_conversion.c
sim.srcs += math/pprz_trig_int.c
sim.srcs += math/pprz_geodetic_double.c
sim.srcs += math/pprz_geodetic_float.c
sim.srcs += math/pprz_geodetic_int.c
sim.srcs += math/pprz_algebra_double.c
sim.srcs += math/pprz_algebra_float.c
sim.srcs += math/pprz_algebra_int.c
ifneq ($(GPS_LED),none)
sim.CFLAGS += -DGPS_LED=$(GPS_LED)
endif
sim.CFLAGS += -DUSE_GPS
sim.srcs += $(GPS_DIR)/gps.c
sim.CFLAGS += -DNPS_BYPASS_INS=TRUE
sim.CFLAGS += -DNPS_BYPASS_AHRS=TRUE
sim.srcs += nps/nps_fdm_fixedwing_sim.c
sim.CFLAGS += -DTELEMETRY_FREQUENCY=$(TELEMETRY_FREQUENCY)
sim.CFLAGS += -DPERIODIC_TELEMETRY
sim.CFLAGS += -DDOWNLINK
sim.srcs += $(DATALINK_DIR)/telemetry.c
sim.srcs += $(DATALINK_DIR)/datalink.c
sim.srcs += $(DATALINK_DIR)/downlink.c
sim.srcs += $(SRC_FIRMWARE)/ap_downlink.c
sim.srcs += $(SRC_FIRMWARE)/fbw_downlink.c
sim.CFLAGS += -DACTUATORS
sim.srcs += $(ACTUATORS_DIR)/actuators.c
sim.srcs += arch/$(ARCH)/$(ACTUATORS_DIR)/actuators_pwm_arch.c
sim.CFLAGS += -DUSE_ADC
sim.srcs += arch/$(ARCH)/mcu_periph/adc_arch.c
sim.srcs += $(ENERGY_DIR)/electrical.c
sim.CFLAGS += -DGPS_TYPE_H=\"modules/gps/gps_sim_nps.h\"
sim.srcs += $(GPS_DIR)/gps_sim_nps.c
sim.CFLAGS += -DCTRL_TYPE_H=\"firmwares/fixedwing/guidance/guidance_v.h\"
sim.srcs += $(SRC_FIRMWARE)/guidance/guidance_h.c
sim.srcs += $(SRC_FIRMWARE)/guidance/guidance_v.c
sim.CFLAGS += -DUSE_IMU
sim.srcs += $(IMU_DIR)/imu.c
sim.srcs += $(IMU_DIR)/imu_nps.c
sim.CFLAGS += -DINS_TYPE_H=\"modules/ins/ins_alt_float.h\"
sim.srcs += $(INS_DIR)/ins_alt_float.c
sim.srcs += $(INS_DIR)/ins.c
sim.srcs += $(NAV_DIR)/nav_line.c
sim.CFLAGS += -DUSE_NPS
sim.CFLAGS += -DUSE_BARO_BOARD=FALSE
sim.CFLAGS += -DBARO_PERIODIC_FREQUENCY=$(BARO_PERIODIC_FREQUENCY)
sim.CFLAGS += -I$(PAPARAZZI_HOME)/conf/simulator/nps
sim.CFLAGS += -I$(PAPARAZZI_SRC)/sw/simulator/nps
sim.CFLAGS += -I$(PAPARAZZI_SRC)/sw/simulator
sim.LDFLAGS += -lm -livy $(shell pcre-config --libs) -lgsl -lgslcblas
sim.srcs += $(NPS_DIR)/nps_main_common.c
sim.srcs += math/pprz_geodetic_wmm2020.c
sim.srcs += $(NPS_DIR)/nps_random.c
sim.srcs += $(NPS_DIR)/nps_flightgear.c
sim.srcs += $(NPS_DIR)/nps_ivy.c
sim.srcs += $(NPS_DIR)/nps_atmosphere.c
sim.srcs += $(NPS_DIR)/nps_sensor_sideslip.c
sim.srcs += $(NPS_DIR)/nps_sensor_aoa.c
sim.srcs += $(NPS_DIR)/nps_sensor_temperature.c
sim.srcs += $(NPS_DIR)/nps_sensor_airspeed.c
sim.srcs += $(NPS_DIR)/nps_sensor_gps.c
sim.srcs += $(NPS_DIR)/nps_sensor_sonar.c
sim.srcs += $(NPS_DIR)/nps_sensor_baro.c
sim.srcs += $(NPS_DIR)/nps_sensor_mag.c
sim.srcs += $(NPS_DIR)/nps_sensor_accel.c
sim.srcs += $(NPS_DIR)/nps_sensor_gyro.c
sim.srcs += $(NPS_DIR)/nps_sensors_utils.c
sim.srcs += $(NPS_DIR)/nps_sensors.c
$(TARGET).MAKEFILE = $(TARGET)
$(TARGET).ARCHDIR = sim
# detect system arch and include rt and pthread library only on linux
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
  $(TARGET).LDFLAGS += -lrt -pthread
endif
# sdl needed for joystick input
$(TARGET).LDFLAGS += $(shell sdl-config --libs)
# glib is still needed for some components (such as radio input)
$(TARGET).CFLAGS  += $(shell pkg-config glib-2.0 --cflags)
$(TARGET).LDFLAGS += $(shell pkg-config glib-2.0 --libs)
#
# add the simulator and var directory to the make searchpath
#
VPATH += $(PAPARAZZI_SRC)/sw/simulator
VPATH += $(PAPARAZZI_HOME)/var/share
sim.CFLAGS += -DRADIO_CONTROL_TYPE_PPM
ifdef PPM_CONFIG
sim.CFLAGS += -DPPM_CONFIG=$(PPM_CONFIG)
endif
sim.CFLAGS += -DUSE_PPM=TRUE
sim.srcs += $(RADIO_CONTROL_DIR)/ppm.c
sim.srcs += arch/$(ARCH)/$(RADIO_CONTROL_DIR)/ppm_arch.c
sim.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_attitude.c
sim.srcs += state.c
sim.CFLAGS += -DUSE_UDP

ifeq ($(ARCH), linux)
sim.srcs += arch/linux/udp_socket.c
endif
sim.srcs += mcu_periph/udp.c
sim.srcs += arch/$(ARCH)/mcu_periph/udp_arch.c
sim.CFLAGS += -Iarch/linux
sim.srcs += arch/linux/udp_socket.c
sim.CFLAGS += -DDATALINK=PPRZ
sim.CFLAGS += -DDOWNLINK_TRANSPORT=pprz_tp
sim.CFLAGS += -DPPRZ_UART=$(MODEM_DEV_LOWER)
sim.CFLAGS += -DDOWNLINK_DEVICE=$(MODEM_DEV_LOWER)
sim.CFLAGS += -D$(MODEM_DEV_UPPER)_BROADCAST=$(MODEM_BROADCAST)
sim.CFLAGS += -D$(MODEM_DEV_UPPER)_PORT_IN=$(MODEM_PORT_IN)
sim.CFLAGS += -D$(MODEM_DEV_UPPER)_PORT_OUT=$(MODEM_PORT_OUT)
sim.CFLAGS += -D$(MODEM_DEV_UPPER)_HOST=$(MODEM_HOST)
sim.CFLAGS += -DUSE_$(MODEM_DEV_UPPER)
sim.srcs += pprzlink/src/pprz_transport.c
sim.srcs += $(DATALINK_DIR)/pprz_dl.c
sim.CFLAGS += -DUSE_COMMANDS
ifneq ($(SYS_TIME_LED),none)
sim.CFLAGS += -DSYS_TIME_LED=$(SYS_TIME_LED)
endif
sim.CFLAGS += -DBOARD_CONFIG=$(BOARD_CFG)
sim.CFLAGS += -I$(SRC_MODULES)
sim.CFLAGS += -I$(SRC_BOARD)
ifeq ($(ARCH), linux)
sim.LDFLAGS += -lrt
endif
sim.srcs += $(CORE_DIR)/commands.c
sim.srcs += mcu_periph/sys_time.c

ifeq ($(ARCH), stm32)
sim.srcs += arch/$(ARCH)/led_hw.c
endif
sim.srcs += arch/$(ARCH)/mcu_periph/sys_time_arch.c
VPATH += $(PAPARAZZI_HOME)/var/share
VPATH += $(PAPARAZZI_HOME)/sw/ext
$(TARGET).ARCHDIR = $(ARCH)
sim.CFLAGS += -DSITL
sim.CFLAGS += -DAP
sim.srcs += $(NPS_DIR)/nps_main_sitl.c
sim.srcs += $(NPS_DIR)/nps_radio_control_spektrum.c
sim.srcs += $(NPS_DIR)/nps_radio_control_joystick.c
sim.srcs += $(NPS_DIR)/nps_radio_control.c
sim.srcs += $(NPS_DIR)/nps_electrical.c
ifeq ($(USE_GENERATED_AUTOPILOT), TRUE)
sim.CFLAGS += -DUSE_GENERATED_AUTOPILOT=1
endif

ifeq ($(USE_GENERATED_AUTOPILOT), TRUE)
sim.srcs += $(SRC_FIRMWARE)/autopilot_generated.c
endif

ifneq ($(USE_GENERATED_AUTOPILOT), TRUE)
sim.srcs += $(SRC_FIRMWARE)/autopilot_static.c
endif
sim.srcs += $(SRC_FIRMWARE)/autopilot_utils.c
sim.srcs += $(SRC_FIRMWARE)/autopilot_firmware.c
sim.srcs += autopilot.c
ifdef AHRS_MAG_CORRECT_FREQUENCY
sim.CFLAGS += -DAHRS_MAG_CORRECT_FREQUENCY=$(AHRS_MAG_CORRECT_FREQUENCY)
endif
ifdef AHRS_CORRECT_FREQUENCY
sim.CFLAGS += -DAHRS_CORRECT_FREQUENCY=$(AHRS_CORRECT_FREQUENCY)
endif
ifdef AHRS_PROPAGATE_FREQUENCY
sim.CFLAGS += -DAHRS_PROPAGATE_FREQUENCY=$(AHRS_PROPAGATE_FREQUENCY)
endif
ifeq ($(WIND_INFO), TRUE)
sim.CFLAGS += -DWIND_INFO
endif
sim.CFLAGS += -DPERIODIC_FREQUENCY=$(PERIODIC_FREQUENCY)
sim.CFLAGS += -DFIXEDWING_FIRMWARE
sim.CFLAGS += -I$(SRC_FIRMWARE)

ifeq ($(RTOS), chibios)
sim.srcs += main_chibios.c
endif

ifneq ($(RTOS), chibios)
sim.srcs += main_bare.c
endif
sim.srcs += main_ap.c
sim.CFLAGS += -DAP
sim.srcs += nps/nps_autopilot_fixedwing.c

endif # end of target 'sim'


####################################################
# makefile target 'ap' for firmware 'fixedwing'
####################################################

ifeq ($(TARGET), ap)

ACTUATORS_DIR = modules/actuators
AHRS_DIR = modules/ahrs
AUTOPILOT_GNC_DIR = modules/autopilot_gnc
AUTOPILOT_GNC_FW_DIR = modules/autopilot_gnc_fw
AUTOPILOT_GUIDED_DIR = modules/autopilot_guided
BOARDS_DIR = modules/boards
CONTROL_DIR = modules/control
CORE_DIR = modules/core
DATALINK_DIR = modules/datalink
ENERGY_DIR = modules/energy
FIRMWARES_DIR = modules/firmwares
GPS_DIR = modules/gps
GUIDANCE_DIR = modules/guidance
IMU_DIR = modules/imu
INS_DIR = modules/ins
MATH_DIR = modules/math
MCU_PERIPH_DIR = modules/mcu_periph
NAV_DIR = modules/nav
RADIO_CONTROL_DIR = modules/radio_control
SENSORS_DIR = modules/sensors
STABILIZATION_DIR = modules/stabilization
TARGETS_DIR = modules/targets

AHRS_CORRECT_FREQUENCY = 100
AHRS_PROPAGATE_FREQUENCY = 100
PERIODIC_FREQUENCY = 120
SRC_ARCH = arch/$(ARCH)
SRC_MODULES = modules
SRC_BOARD = boards/$(BOARD)
SRC_FIRMWARE = firmwares/fixedwing

include $(PAPARAZZI_SRC)/conf/boards/lisa_m_2.0.makefile
include $(PAPARAZZI_SRC)/conf/firmwares/fixedwing.makefile

RADIO_CONTROL_LED ?= none
GPS_LED ?= none
TELEMETRY_FREQUENCY ?= $(PERIODIC_FREQUENCY)
BARO_PERIODIC_FREQUENCY ?= 50
BARO_LED ?= none
USE_BARO_BOARD ?= TRUE
MODEM_PORT_LOWER = $(shell echo $(MODEM_PORT) | tr A-Z a-z)
MODEM_PORT_UPPER = $(shell echo $(MODEM_PORT) | tr a-z A-Z)
ASPIRIN_2_SPI_SLAVE_IDX ?= SPI_SLAVE2
ASPIRIN_2_SPI_DEV ?= spi2
ASPIRIN_2_SPI_DEV_LOWER = $(shell echo $(ASPIRIN_2_SPI_DEV) | tr A-Z a-z)
ASPIRIN_2_SPI_DEV_UPPER = $(shell echo $(ASPIRIN_2_SPI_DEV) | tr a-z A-Z)
UBX_GPS_BAUD ?= $(GPS_BAUD)
UBX_GPS_PORT ?= $(GPS_PORT)
UBX_GPS_PORT_LOWER = $(shell echo $(UBX_GPS_PORT) | tr A-Z a-z)
UBX_GPS_PORT_UPPER = $(shell echo $(UBX_GPS_PORT) | tr a-z A-Z)
USE_MAGNETOMETER ?= 0
WIND_INFO ?= TRUE
PERIODIC_FREQUENCY ?= 60

$(TARGET).CFLAGS += -DAHRS_TRIGGERED_ATTITUDE_LOOP
$(TARGET).CFLAGS += -DUSE_MAGNETOMETER=FALSE

ap.srcs += $(CORE_DIR)/settings.c
ap.srcs += arch/$(ARCH)/$(CORE_DIR)/settings_arch.c
ap.CFLAGS += -DRADIO_CONTROL
ifneq ($(RADIO_CONTROL_LED),none)
ap.CFLAGS += -DRADIO_CONTROL_LED=$(RADIO_CONTROL_LED)
endif
ap.srcs += $(RADIO_CONTROL_DIR)/radio_control.c
ap.CFLAGS += -DNAV
ap.srcs += $(NAV_DIR)/nav_survey_rectangle.c
ap.srcs += $(NAV_DIR)/common_flight_plan.c
ap.srcs += $(SRC_FIRMWARE)/nav.c
ap.CFLAGS += -DPERIPHERALS_AUTO_INIT
ap.srcs += mcu.c

ifneq ($(BOARD), ardrone)
ap.srcs += arch/$(ARCH)/mcu_periph/gpio_arch.c
endif
ap.srcs += arch/$(ARCH)/mcu_arch.c
ap.srcs += math/pprz_stat.c
ap.srcs += math/pprz_orientation_conversion.c
ap.srcs += math/pprz_trig_int.c
ap.srcs += math/pprz_geodetic_double.c
ap.srcs += math/pprz_geodetic_float.c
ap.srcs += math/pprz_geodetic_int.c
ap.srcs += math/pprz_algebra_double.c
ap.srcs += math/pprz_algebra_float.c
ap.srcs += math/pprz_algebra_int.c
ap.srcs += mcu_periph/softi2c.c
ap.srcs += mcu_periph/i2c.c
ap.srcs += arch/$(ARCH)/mcu_periph/i2c_arch.c
ifneq ($(GPS_LED),none)
ap.CFLAGS += -DGPS_LED=$(GPS_LED)
endif
ap.CFLAGS += -DUSE_GPS
ap.srcs += $(GPS_DIR)/gps.c
ap.CFLAGS += -DTELEMETRY_FREQUENCY=$(TELEMETRY_FREQUENCY)
ap.CFLAGS += -DPERIODIC_TELEMETRY
ap.CFLAGS += -DDOWNLINK
ap.srcs += $(DATALINK_DIR)/telemetry.c
ap.srcs += $(DATALINK_DIR)/datalink.c
ap.srcs += $(DATALINK_DIR)/downlink.c
ap.srcs += $(SRC_FIRMWARE)/ap_downlink.c
ap.srcs += $(SRC_FIRMWARE)/fbw_downlink.c
ap.CFLAGS += -DBARO_PERIODIC_FREQUENCY=$(BARO_PERIODIC_FREQUENCY)
ifneq ($(BARO_LED),none)
ap.CFLAGS += -DBARO_LED=$(BARO_LED)
endif
ap.srcs += $(SENSORS_DIR)/baro_board_common.c
ap.CFLAGS += -DUSE_AHRS_ALIGNER
ap.CFLAGS += -DUSE_AHRS
ifneq ($(AHRS_ALIGNER_LED),none)
ap.CFLAGS += -DAHRS_ALIGNER_LED=$(AHRS_ALIGNER_LED)
endif
ap.srcs += $(AHRS_DIR)/ahrs_aligner.c
ap.srcs += $(AHRS_DIR)/ahrs.c
ap.CFLAGS += -DACTUATORS
ap.srcs += $(ACTUATORS_DIR)/actuators.c

ifeq ($(ARCH), stm32)
ap.srcs += arch/$(ARCH)/$(ACTUATORS_DIR)/actuators_shared_arch.c
endif
ap.srcs += arch/$(ARCH)/$(ACTUATORS_DIR)/actuators_pwm_arch.c
ap.CFLAGS += -DUSE_ADC
ap.srcs += arch/$(ARCH)/mcu_periph/adc_arch.c
ifeq ($(USE_BARO_BOARD), TRUE)
# Lisa/M baro
ifeq ($(BOARD), lisa_m)
  ifeq ($(BOARD_VERSION), 1.0)
    # on lisa_m_1.0: defaults to i2c baro bmp085 on the board
    LISA_M_BARO ?= BARO_BOARD_BMP085
  else ifeq ($(BOARD_VERSION), 2.0)
    # on lisa_m_2.0: defaults to MS5611 baro connected via SPI on Aspirin2.2
    LISA_M_BARO ?= BARO_MS5611_SPI
  else ifeq ($(BOARD_VERSION), 2.1)
    # on lisa_m_2.1: defaults to MS5611 baro connected via SPI on the integrated Aspirin2.2
    LISA_M_BARO ?= BARO_MS5611_SPI
  endif
  ifeq ($(LISA_M_BARO), BARO_MS5611_SPI)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_SPI
    include $(CFG_SHARED)/spi_master.makefile
    BARO_BOARD_CFLAGS += -DUSE_SPI2 -DUSE_SPI_SLAVE3
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi2
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE3
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_spi.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
  else ifeq ($(LISA_M_BARO), BARO_MS5611_I2C)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_I2C
    BARO_BOARD_CFLAGS += -DUSE_I2C2
    BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c2
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_i2c.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_i2c.c
  else ifeq ($(LISA_M_BARO), BARO_BOARD_BMP085)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_BOARD_BMP085
    BARO_BOARD_CFLAGS += -DUSE_I2C2
    BARO_BOARD_SRCS += peripherals/bmp085.c
    BARO_BOARD_SRCS += $(SRC_BOARD)/baro_board.c
  endif
else ifeq ($(BOARD), lisa_mx)
# defaults to MS5611 via SPI on Aspirin
LISA_MX_BARO ?= BARO_MS5611_SPI
  ifeq ($(LISA_MX_BARO), BARO_MS5611_SPI)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_SPI
    include $(CFG_SHARED)/spi_master.makefile
    BARO_BOARD_CFLAGS += -DUSE_SPI2 -DUSE_SPI_SLAVE3
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi2
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE3
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_spi.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
  else ifeq ($(LISA_MX_BARO), BARO_MS5611_I2C)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_I2C
    BARO_BOARD_CFLAGS += -DUSE_I2C2
    BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c2
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_i2c.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_i2c.c
  else ifeq ($(LISA_MX_BARO), BARO_BOARD_BMP085)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_BOARD_BMP085
    BARO_BOARD_CFLAGS += -DUSE_I2C2
    BARO_BOARD_SRCS += peripherals/bmp085.c
    BARO_BOARD_SRCS += $(SRC_BOARD)/baro_board.c
  endif
 else ifeq ($(BOARD), lisa_mxs)
# defaults to MS5611 via SPI on Aspirin
LISA_MXS_BARO ?= BARO_MS5611_SPI
  ifeq ($(LISA_MXS_BARO), BARO_MS5611_SPI)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_SPI
    include $(CFG_SHARED)/spi_master.makefile
    BARO_BOARD_CFLAGS += -DUSE_SPI2 -DUSE_SPI_SLAVE3
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi2
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE3
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_spi.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
  else ifeq ($(LISA_MXS_BARO), BARO_MS5611_I2C)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_I2C
    BARO_BOARD_CFLAGS += -DUSE_I2C2
    BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c2
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_i2c.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_i2c.c
  else ifeq ($(LISA_MXS_BARO), BARO_BOARD_BMP085)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_BOARD_BMP085
    BARO_BOARD_CFLAGS += -DUSE_I2C2
    BARO_BOARD_SRCS += peripherals/bmp085.c
    BARO_BOARD_SRCS += $(SRC_BOARD)/baro_board.c
  endif
# Lisa/S baro
else ifeq ($(BOARD), lisa_s)
# defaults to SPI baro MS5611 on the board
  include $(CFG_SHARED)/spi_master.makefile
  BARO_BOARD_CFLAGS += -DUSE_SPI1 -DUSE_SPI_SLAVE1
  BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi1
  BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE1
  BARO_BOARD_SRCS += peripherals/ms5611.c
  BARO_BOARD_SRCS += peripherals/ms5611_spi.c
  BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
# ELLE0 baro
else ifeq ($(BOARD), elle0)
# defaults to SPI baro MS5611 on the board
  include $(CFG_SHARED)/spi_master.makefile
  BARO_BOARD_CFLAGS += -DUSE_SPI1 -DUSE_SPI_SLAVE1
  BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi1
  BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE1
  BARO_BOARD_SRCS += peripherals/ms5611.c
  BARO_BOARD_SRCS += peripherals/ms5611_spi.c
  BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
# Lia baro (no bmp onboard)
else ifeq ($(BOARD), lia)
# fixme, reuse the baro drivers in lisa_m dir
LIA_BARO ?= BARO_MS5611_SPI
  ifeq ($(LIA_BARO), BARO_MS5611_SPI)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_SPI
    include $(CFG_SHARED)/spi_master.makefile
    BARO_BOARD_CFLAGS += -DUSE_SPI2 -DUSE_SPI_SLAVE3
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi2
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE3
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_spi.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
  else ifeq ($(LIA_BARO), BARO_MS5611_I2C)
    BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_I2C
    BARO_BOARD_CFLAGS += -DUSE_I2C2
    BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c2
    BARO_BOARD_SRCS += peripherals/ms5611.c
    BARO_BOARD_SRCS += peripherals/ms5611_i2c.c
    BARO_BOARD_SRCS += boards/baro_board_ms5611_i2c.c
  endif
# PX4FMU
else ifeq ($(BOARD),$(filter $(BOARD),px4fmu))
  include $(CFG_SHARED)/spi_master.makefile
  BARO_BOARD_SRCS += peripherals/ms5611.c
  BARO_BOARD_SRCS += peripherals/ms5611_spi.c
  BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
  ifeq ($(BOARD_VERSION), 1.7)
    # PX4FMU 1.7
    BARO_BOARD_CFLAGS += -DUSE_SPI1 -DUSE_SPI_SLAVE3
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi1
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE3
  else ifeq ($(BOARD_VERSION), 2.4)
    # PX4FMU 2.4 a.k.a. PIXHAWK
    BARO_BOARD_CFLAGS += -DUSE_SPI1 -DUSE_SPI_SLAVE3
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi1
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE3
  else ifeq ($(BOARD_VERSION), 4.0)
    # PX4FMU 4.0 a.k.a. PX4_PIXRACER
    BARO_BOARD_CFLAGS += -DUSE_SPI2 -DUSE_SPI_SLAVE3
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi2
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE3
  else ifeq ($(BOARD_VERSION), 5.0)
    # PX4FMU 5.0
    BARO_BOARD_CFLAGS += -DUSE_SPI4 -DUSE_SPI_SLAVE4
    BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi4
    BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE4
  endif
# Naze32
else ifeq ($(BOARD), naze32)
  BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_I2C
  BARO_BOARD_CFLAGS += -DUSE_I2C2
  BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c2
  BARO_BOARD_SRCS += peripherals/ms5611.c
  BARO_BOARD_SRCS += peripherals/ms5611_i2c.c
  BARO_BOARD_SRCS += boards/baro_board_ms5611_i2c.c
# OPA (AP)
else ifeq ($(BOARD), opa_ap)
  include $(CFG_SHARED)/spi_master.makefile
  BARO_BOARD_CFLAGS += -DUSE_SPI2 -DUSE_SPI_SLAVE2
  BARO_BOARD_CFLAGS += -DBB_MS5611_SPI_DEV=spi2
  BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_IDX=SPI_SLAVE2
  BARO_BOARD_SRCS += peripherals/ms5611.c
  BARO_BOARD_SRCS += peripherals/ms5611_spi.c
  BARO_BOARD_SRCS += boards/baro_board_ms5611_spi.c
# OpenPilot Revo
else ifeq ($(BOARD), openpilot_revo)
  ifeq ($(BOARD_VERSION), nano)
    BARO_BOARD_CFLAGS += -DUSE_I2C3
    BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c3
    #BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_ADDR=0xEC
  else
    BARO_BOARD_CFLAGS += -DUSE_I2C1
    BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c1
  endif
  BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_I2C
  BARO_BOARD_SRCS += peripherals/ms5611.c
  BARO_BOARD_SRCS += peripherals/ms5611_i2c.c
  BARO_BOARD_SRCS += boards/baro_board_ms5611_i2c.c
else ifeq ($(BOARD), chimera)
  BARO_BOARD_CFLAGS += -DBARO_BOARD=BARO_MS5611_I2C
  BARO_BOARD_CFLAGS += -DUSE_I2C1
  BARO_BOARD_CFLAGS += -DBB_MS5611_I2C_DEV=i2c1
  BARO_BOARD_CFLAGS += -DBB_MS5611_SLAVE_ADDR=MS5611_I2C_SLAVE_ADDR_ALT
  BARO_BOARD_SRCS += peripherals/ms5611.c
  BARO_BOARD_SRCS += peripherals/ms5611_i2c.c
  BARO_BOARD_SRCS += boards/baro_board_ms5611_i2c.c
endif # check board
ap.CFLAGS += $(BARO_BOARD_CFLAGS)
ap.srcs += $(BARO_BOARD_SRCS)
else
ap.CFLAGS += -DUSE_BARO_BOARD=FALSE
endif # check USE_BARO_BOARD
ifeq (,$(findstring $(SEPARATE_FBW),0 FALSE))
ap.srcs += $(ENERGY_DIR)/electrical.c
endif
ap.CFLAGS += -DCTRL_TYPE_H=\"firmwares/fixedwing/guidance/guidance_v.h\"
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_h.c
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_v.c
ap.CFLAGS += -DUSE_IMU
ap.srcs += $(IMU_DIR)/imu.c
ap.srcs += $(NAV_DIR)/nav_line.c
ap.CFLAGS += -DRADIO_CONTROL_TYPE_PPM
ifdef PPM_CONFIG
ap.CFLAGS += -DPPM_CONFIG=$(PPM_CONFIG)
endif
ap.CFLAGS += -DUSE_PPM=TRUE
ap.srcs += $(RADIO_CONTROL_DIR)/ppm.c
ap.srcs += arch/$(ARCH)/$(RADIO_CONTROL_DIR)/ppm_arch.c
ap.CFLAGS += -DSPI_MASTER
ap.CFLAGS += -DUSE_SPI
ap.srcs += mcu_periph/spi.c
ap.srcs += arch/$(ARCH)/mcu_periph/spi_arch.c
ap.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_attitude.c
ap.srcs += state.c

ifeq ($(ARCH), linux)
ap.srcs += arch/linux/serial_port.c
endif
ap.srcs += mcu_periph/uart.c

ifneq ($(filter $(ARCH),chibios stm32),)
ap.srcs += arch/$(ARCH)/usb_ser_hw.c
endif
ap.srcs += arch/$(ARCH)/mcu_periph/uart_arch.c
ap.CFLAGS += -DDATALINK=PPRZ
ap.CFLAGS += -DDOWNLINK_TRANSPORT=pprz_tp
ap.CFLAGS += -DPPRZ_UART=$(MODEM_PORT_LOWER)
ap.CFLAGS += -DDOWNLINK_DEVICE=$(MODEM_PORT_LOWER)
ap.CFLAGS += -D$(MODEM_PORT_UPPER)_BAUD=$(MODEM_BAUD)
ap.CFLAGS += -DUSE_$(MODEM_PORT_UPPER)
ap.srcs += pprzlink/src/pprz_transport.c
ap.srcs += $(DATALINK_DIR)/pprz_dl.c
ap.CFLAGS += -DUSE_COMMANDS
ifneq ($(SYS_TIME_LED),none)
ap.CFLAGS += -DSYS_TIME_LED=$(SYS_TIME_LED)
endif
ap.CFLAGS += -DBOARD_CONFIG=$(BOARD_CFG)
ap.CFLAGS += -I$(SRC_MODULES)
ap.CFLAGS += -I$(SRC_BOARD)
ifeq ($(ARCH), linux)
ap.LDFLAGS += -lrt
endif
ap.srcs += $(CORE_DIR)/commands.c
ap.srcs += mcu_periph/sys_time.c

ifeq ($(ARCH), stm32)
ap.srcs += arch/$(ARCH)/led_hw.c
endif
ap.srcs += arch/$(ARCH)/mcu_periph/sys_time_arch.c
VPATH += $(PAPARAZZI_HOME)/var/share
VPATH += $(PAPARAZZI_HOME)/sw/ext
$(TARGET).ARCHDIR = $(ARCH)
ap.CFLAGS += -DUSE_LED
ap.CFLAGS += -DUSE_$(ASPIRIN_2_SPI_SLAVE_IDX)
ap.CFLAGS += -DASPIRIN_2_SPI_SLAVE_IDX=$(ASPIRIN_2_SPI_SLAVE_IDX)
ap.CFLAGS += -DUSE_$(ASPIRIN_2_SPI_DEV_UPPER)
ap.CFLAGS += -DASPIRIN_2_SPI_DEV=$(ASPIRIN_2_SPI_DEV_LOWER)
ap.srcs += $(IMU_DIR)/imu_aspirin_2_spi.c
ap.srcs += peripherals/mpu60x0_spi.c
ap.srcs += peripherals/mpu60x0.c
ap.CFLAGS += -D$(UBX_GPS_PORT_UPPER)_BAUD=$(UBX_GPS_BAUD)
ap.CFLAGS += -DUBX_GPS_LINK=$(UBX_GPS_PORT_LOWER)
ap.CFLAGS += -DUSE_$(UBX_GPS_PORT_UPPER)
ap.srcs += $(GPS_DIR)/gps_ubx.c
      ifdef SECONDARY_GPS
      ifneq (,$(findstring $(SECONDARY_GPS), ublox))
      # this is the secondary GPS
      $(TARGET).CFLAGS += -DGPS_SECONDARY_TYPE_H=\"modules/gps/gps_ubx.h\"
      $(TARGET).CFLAGS += -DSECONDARY_GPS=GPS_UBX
      else
      $(TARGET).CFLAGS += -DGPS_TYPE_H=\"modules/gps/gps_ubx.h\"
      $(TARGET).CFLAGS += -DPRIMARY_GPS=GPS_UBX
      endif
      else
      # plain old single GPS usage
      $(TARGET).CFLAGS += -DGPS_TYPE_H=\"modules/gps/gps_ubx.h\"
      endif
ifeq ($(USE_GENERATED_AUTOPILOT), TRUE)
ap.CFLAGS += -DUSE_GENERATED_AUTOPILOT=1
endif

ifeq ($(USE_GENERATED_AUTOPILOT), TRUE)
ap.srcs += $(SRC_FIRMWARE)/autopilot_generated.c
endif

ifneq ($(USE_GENERATED_AUTOPILOT), TRUE)
ap.srcs += $(SRC_FIRMWARE)/autopilot_static.c
endif
ap.srcs += $(SRC_FIRMWARE)/autopilot_utils.c
ap.srcs += $(SRC_FIRMWARE)/autopilot_firmware.c
ap.srcs += autopilot.c
ifeq (,$(findstring $(USE_MAGNETOMETER),0 FALSE))
ap.CFLAGS += -DUSE_MAGNETOMETER
endif
ap.srcs += $(AHRS_DIR)/ahrs_float_dcm_wrapper.c
ap.srcs += $(AHRS_DIR)/ahrs_float_dcm.c
ifdef SECONDARY_AHRS
ifneq (,$(findstring $(SECONDARY_AHRS), dcm float_dcm))
# this is the secondary AHRS
$(TARGET).CFLAGS += -DAHRS_SECONDARY_TYPE_H=\"modules/ahrs/ahrs_float_dcm_wrapper.h\"
$(TARGET).CFLAGS += -DSECONDARY_AHRS=ahrs_dcm
else
# this is the primary AHRS
$(TARGET).CFLAGS += -DAHRS_TYPE_H=\"modules/ahrs/ahrs_float_dcm_wrapper.h\"
$(TARGET).CFLAGS += -DPRIMARY_AHRS=ahrs_dcm
endif
else
# plain old single AHRS usage
$(TARGET).CFLAGS += -DAHRS_TYPE_H=\"modules/ahrs/ahrs_float_dcm_wrapper.h\"
endif
ifdef AHRS_MAG_CORRECT_FREQUENCY
ap.CFLAGS += -DAHRS_MAG_CORRECT_FREQUENCY=$(AHRS_MAG_CORRECT_FREQUENCY)
endif
ifdef AHRS_CORRECT_FREQUENCY
ap.CFLAGS += -DAHRS_CORRECT_FREQUENCY=$(AHRS_CORRECT_FREQUENCY)
endif
ifdef AHRS_PROPAGATE_FREQUENCY
ap.CFLAGS += -DAHRS_PROPAGATE_FREQUENCY=$(AHRS_PROPAGATE_FREQUENCY)
endif
ifeq ($(WIND_INFO), TRUE)
ap.CFLAGS += -DWIND_INFO
endif
ap.CFLAGS += -DPERIODIC_FREQUENCY=$(PERIODIC_FREQUENCY)
ap.CFLAGS += -DFIXEDWING_FIRMWARE
ap.CFLAGS += -I$(SRC_FIRMWARE)

ifeq ($(RTOS), chibios)
ap.srcs += main_chibios.c
endif

ifneq ($(RTOS), chibios)
ap.srcs += main_bare.c
endif
ap.srcs += main_ap.c
ap.CFLAGS += -DINS_TYPE_H=\"modules/ins/ins_alt_float.h\"
ap.srcs += $(INS_DIR)/ins_alt_float.c
ap.srcs += $(INS_DIR)/ins.c
ap.CFLAGS += -DAP

endif # end of target 'ap'


####################################################
# makefile target 'nps' for firmware 'fixedwing'
####################################################

ifeq ($(TARGET), nps)

ACTUATORS_DIR = modules/actuators
AHRS_DIR = modules/ahrs
AUTOPILOT_GNC_DIR = modules/autopilot_gnc
AUTOPILOT_GNC_FW_DIR = modules/autopilot_gnc_fw
AUTOPILOT_GUIDED_DIR = modules/autopilot_guided
CONTROL_DIR = modules/control
CORE_DIR = modules/core
DATALINK_DIR = modules/datalink
ENERGY_DIR = modules/energy
FDM_DIR = modules/fdm
FIRMWARES_DIR = modules/firmwares
GPS_DIR = modules/gps
GUIDANCE_DIR = modules/guidance
IMU_DIR = modules/imu
INS_DIR = modules/ins
MATH_DIR = modules/math
MCU_PERIPH_DIR = modules/mcu_periph
NAV_DIR = modules/nav
RADIO_CONTROL_DIR = modules/radio_control
STABILIZATION_DIR = modules/stabilization
TARGETS_DIR = modules/targets

JSBSIM_USE_SGPATH = TRUE
JSBSIM_LIB = $(JSBSIM_ROOT)/lib
JSBSIM_INC = $(JSBSIM_ROOT)/include/JSBSim
NPS_DIR = nps
SRC_ARCH = arch/$(ARCH)
SRC_MODULES = modules
SRC_BOARD = boards/$(BOARD)
SRC_FIRMWARE = firmwares/fixedwing

include $(PAPARAZZI_SRC)/conf/boards/pc.makefile
include $(PAPARAZZI_SRC)/conf/firmwares/fixedwing.makefile

RADIO_CONTROL_LED ?= none
GPS_LED ?= none
FIND_JSBSIM_VIA_PKG_CONFIG ?= $(shell pkg-config JSBSim --exists ${AND} echo 'yes')
JSBSIM_ROOT ?= /usr
TELEMETRY_FREQUENCY ?= $(PERIODIC_FREQUENCY)
BARO_PERIODIC_FREQUENCY ?= 50
MODEM_BROADCAST ?= TRUE
MODEM_PORT_IN ?= 4243
MODEM_PORT_OUT ?= 4242
MODEM_DEV ?= UDP0
MODEM_DEV_LOWER = $(shell echo $(MODEM_DEV) | tr A-Z a-z)
MODEM_DEV_UPPER = $(shell echo $(MODEM_DEV) | tr a-z A-Z)
USE_MAGNETOMETER ?= 0
WIND_INFO ?= TRUE
PERIODIC_FREQUENCY ?= 60

$(TARGET).CFLAGS += -DUSE_MAGNETOMETER=FALSE

nps.srcs += $(CORE_DIR)/settings.c
nps.srcs += arch/$(ARCH)/$(CORE_DIR)/settings_arch.c
nps.CFLAGS += -DRADIO_CONTROL
ifneq ($(RADIO_CONTROL_LED),none)
nps.CFLAGS += -DRADIO_CONTROL_LED=$(RADIO_CONTROL_LED)
endif
nps.srcs += $(RADIO_CONTROL_DIR)/radio_control.c
nps.CFLAGS += -DNAV
nps.srcs += $(NAV_DIR)/nav_survey_rectangle.c
nps.srcs += $(NAV_DIR)/common_flight_plan.c
nps.srcs += $(SRC_FIRMWARE)/nav.c
nps.CFLAGS += -DPERIPHERALS_AUTO_INIT
nps.srcs += mcu.c

ifneq ($(BOARD), ardrone)
nps.srcs += arch/$(ARCH)/mcu_periph/gpio_arch.c
endif
nps.srcs += arch/$(ARCH)/mcu_arch.c
nps.srcs += math/pprz_stat.c
nps.srcs += math/pprz_orientation_conversion.c
nps.srcs += math/pprz_trig_int.c
nps.srcs += math/pprz_geodetic_double.c
nps.srcs += math/pprz_geodetic_float.c
nps.srcs += math/pprz_geodetic_int.c
nps.srcs += math/pprz_algebra_double.c
nps.srcs += math/pprz_algebra_float.c
nps.srcs += math/pprz_algebra_int.c
ifneq ($(GPS_LED),none)
nps.CFLAGS += -DGPS_LED=$(GPS_LED)
endif
nps.CFLAGS += -DUSE_GPS
nps.srcs += $(GPS_DIR)/gps.c
nps.srcs += nps/nps_fdm_jsbsim.cpp
      ifeq ($(FIND_JSBSIM_VIA_PKG_CONFIG), yes)
      $(TARGET).CFLAGS  += $(shell pkg-config JSBSim --cflags)
      $(TARGET).LDFLAGS += $(shell pkg-config JSBSim --libs)
        ifeq ($(shell pkg-config JSBSim --modversion), 1.0)
        $(TARGET).CFLAGS += -DNPS_JSBSIM_USE_SGPATH=FALSE
        else
        $(TARGET).CFLAGS += -DNPS_JSBSIM_USE_SGPATH=$(JSBSIM_USE_SGPATH)
        endif
      else
      FIND_JSBSIM_VIA_PKG_CONFIG = no
      $(TARGET).CFLAGS  += -I$(JSBSIM_INC)
      $(TARGET).LDFLAGS += -L$(JSBSIM_LIB) -lJSBSim
      $(TARGET).CFLAGS  += -DNPS_JSBSIM_USE_SGPATH=$(JSBSIM_USE_SGPATH)
      endif
nps.CFLAGS += -DTELEMETRY_FREQUENCY=$(TELEMETRY_FREQUENCY)
nps.CFLAGS += -DPERIODIC_TELEMETRY
nps.CFLAGS += -DDOWNLINK
nps.srcs += $(DATALINK_DIR)/telemetry.c
nps.srcs += $(DATALINK_DIR)/datalink.c
nps.srcs += $(DATALINK_DIR)/downlink.c
nps.srcs += $(SRC_FIRMWARE)/ap_downlink.c
nps.srcs += $(SRC_FIRMWARE)/fbw_downlink.c
nps.CFLAGS += -DUSE_AHRS_ALIGNER
nps.CFLAGS += -DUSE_AHRS
ifneq ($(AHRS_ALIGNER_LED),none)
nps.CFLAGS += -DAHRS_ALIGNER_LED=$(AHRS_ALIGNER_LED)
endif
nps.srcs += $(AHRS_DIR)/ahrs_aligner.c
nps.srcs += $(AHRS_DIR)/ahrs.c
nps.CFLAGS += -DACTUATORS
nps.srcs += $(ACTUATORS_DIR)/actuators.c

ifeq ($(ARCH), stm32)
nps.srcs += arch/$(ARCH)/$(ACTUATORS_DIR)/actuators_shared_arch.c
endif
nps.srcs += arch/$(ARCH)/$(ACTUATORS_DIR)/actuators_pwm_arch.c
nps.CFLAGS += -DUSE_ADC
nps.srcs += arch/$(ARCH)/mcu_periph/adc_arch.c
nps.srcs += $(ENERGY_DIR)/electrical.c
nps.CFLAGS += -DGPS_TYPE_H=\"modules/gps/gps_sim_nps.h\"
nps.srcs += $(GPS_DIR)/gps_sim_nps.c
nps.CFLAGS += -DCTRL_TYPE_H=\"firmwares/fixedwing/guidance/guidance_v.h\"
nps.srcs += $(SRC_FIRMWARE)/guidance/guidance_h.c
nps.srcs += $(SRC_FIRMWARE)/guidance/guidance_v.c
nps.CFLAGS += -DUSE_IMU
nps.srcs += $(IMU_DIR)/imu.c
nps.srcs += $(IMU_DIR)/imu_nps.c
nps.CFLAGS += -DINS_TYPE_H=\"modules/ins/ins_alt_float.h\"
nps.srcs += $(INS_DIR)/ins_alt_float.c
nps.srcs += $(INS_DIR)/ins.c
nps.srcs += $(NAV_DIR)/nav_line.c
nps.CFLAGS += -DUSE_NPS
nps.CFLAGS += -DUSE_BARO_BOARD=FALSE
nps.CFLAGS += -DBARO_PERIODIC_FREQUENCY=$(BARO_PERIODIC_FREQUENCY)
nps.CFLAGS += -I$(PAPARAZZI_HOME)/conf/simulator/nps
nps.CFLAGS += -I$(PAPARAZZI_SRC)/sw/simulator/nps
nps.CFLAGS += -I$(PAPARAZZI_SRC)/sw/simulator
nps.LDFLAGS += -lm -livy $(shell pcre-config --libs) -lgsl -lgslcblas
nps.srcs += $(NPS_DIR)/nps_main_common.c
nps.srcs += math/pprz_geodetic_wmm2020.c
nps.srcs += $(NPS_DIR)/nps_random.c
nps.srcs += $(NPS_DIR)/nps_flightgear.c
nps.srcs += $(NPS_DIR)/nps_ivy.c
nps.srcs += $(NPS_DIR)/nps_atmosphere.c
nps.srcs += $(NPS_DIR)/nps_sensor_sideslip.c
nps.srcs += $(NPS_DIR)/nps_sensor_aoa.c
nps.srcs += $(NPS_DIR)/nps_sensor_temperature.c
nps.srcs += $(NPS_DIR)/nps_sensor_airspeed.c
nps.srcs += $(NPS_DIR)/nps_sensor_gps.c
nps.srcs += $(NPS_DIR)/nps_sensor_sonar.c
nps.srcs += $(NPS_DIR)/nps_sensor_baro.c
nps.srcs += $(NPS_DIR)/nps_sensor_mag.c
nps.srcs += $(NPS_DIR)/nps_sensor_accel.c
nps.srcs += $(NPS_DIR)/nps_sensor_gyro.c
nps.srcs += $(NPS_DIR)/nps_sensors_utils.c
nps.srcs += $(NPS_DIR)/nps_sensors.c
$(TARGET).MAKEFILE = $(TARGET)
$(TARGET).ARCHDIR = sim
# detect system arch and include rt and pthread library only on linux
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
  $(TARGET).LDFLAGS += -lrt -pthread
endif
# sdl needed for joystick input
$(TARGET).LDFLAGS += $(shell sdl-config --libs)
# glib is still needed for some components (such as radio input)
$(TARGET).CFLAGS  += $(shell pkg-config glib-2.0 --cflags)
$(TARGET).LDFLAGS += $(shell pkg-config glib-2.0 --libs)
#
# add the simulator and var directory to the make searchpath
#
VPATH += $(PAPARAZZI_SRC)/sw/simulator
VPATH += $(PAPARAZZI_HOME)/var/share
nps.CFLAGS += -DRADIO_CONTROL_TYPE_PPM
ifdef PPM_CONFIG
nps.CFLAGS += -DPPM_CONFIG=$(PPM_CONFIG)
endif
nps.CFLAGS += -DUSE_PPM=TRUE
nps.srcs += $(RADIO_CONTROL_DIR)/ppm.c
nps.srcs += arch/$(ARCH)/$(RADIO_CONTROL_DIR)/ppm_arch.c
nps.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_attitude.c
nps.srcs += state.c
nps.CFLAGS += -DUSE_UDP

ifeq ($(ARCH), linux)
nps.srcs += arch/linux/udp_socket.c
endif
nps.srcs += mcu_periph/udp.c
nps.srcs += arch/$(ARCH)/mcu_periph/udp_arch.c
nps.CFLAGS += -Iarch/linux
nps.srcs += arch/linux/udp_socket.c
nps.CFLAGS += -DDATALINK=PPRZ
nps.CFLAGS += -DDOWNLINK_TRANSPORT=pprz_tp
nps.CFLAGS += -DPPRZ_UART=$(MODEM_DEV_LOWER)
nps.CFLAGS += -DDOWNLINK_DEVICE=$(MODEM_DEV_LOWER)
nps.CFLAGS += -D$(MODEM_DEV_UPPER)_BROADCAST=$(MODEM_BROADCAST)
nps.CFLAGS += -D$(MODEM_DEV_UPPER)_PORT_IN=$(MODEM_PORT_IN)
nps.CFLAGS += -D$(MODEM_DEV_UPPER)_PORT_OUT=$(MODEM_PORT_OUT)
nps.CFLAGS += -D$(MODEM_DEV_UPPER)_HOST=$(MODEM_HOST)
nps.CFLAGS += -DUSE_$(MODEM_DEV_UPPER)
nps.srcs += pprzlink/src/pprz_transport.c
nps.srcs += $(DATALINK_DIR)/pprz_dl.c
nps.CFLAGS += -DUSE_COMMANDS
ifneq ($(SYS_TIME_LED),none)
nps.CFLAGS += -DSYS_TIME_LED=$(SYS_TIME_LED)
endif
nps.CFLAGS += -DBOARD_CONFIG=$(BOARD_CFG)
nps.CFLAGS += -I$(SRC_MODULES)
nps.CFLAGS += -I$(SRC_BOARD)
ifeq ($(ARCH), linux)
nps.LDFLAGS += -lrt
endif
nps.srcs += $(CORE_DIR)/commands.c
nps.srcs += mcu_periph/sys_time.c

ifeq ($(ARCH), stm32)
nps.srcs += arch/$(ARCH)/led_hw.c
endif
nps.srcs += arch/$(ARCH)/mcu_periph/sys_time_arch.c
VPATH += $(PAPARAZZI_HOME)/var/share
VPATH += $(PAPARAZZI_HOME)/sw/ext
$(TARGET).ARCHDIR = $(ARCH)
ifeq ($(USE_GENERATED_AUTOPILOT), TRUE)
nps.CFLAGS += -DUSE_GENERATED_AUTOPILOT=1
endif

ifeq ($(USE_GENERATED_AUTOPILOT), TRUE)
nps.srcs += $(SRC_FIRMWARE)/autopilot_generated.c
endif

ifneq ($(USE_GENERATED_AUTOPILOT), TRUE)
nps.srcs += $(SRC_FIRMWARE)/autopilot_static.c
endif
nps.srcs += $(SRC_FIRMWARE)/autopilot_utils.c
nps.srcs += $(SRC_FIRMWARE)/autopilot_firmware.c
nps.srcs += autopilot.c
ifeq (,$(findstring $(USE_MAGNETOMETER),0 FALSE))
nps.CFLAGS += -DUSE_MAGNETOMETER
endif
nps.srcs += $(AHRS_DIR)/ahrs_float_dcm_wrapper.c
nps.srcs += $(AHRS_DIR)/ahrs_float_dcm.c
ifdef SECONDARY_AHRS
ifneq (,$(findstring $(SECONDARY_AHRS), dcm float_dcm))
# this is the secondary AHRS
$(TARGET).CFLAGS += -DAHRS_SECONDARY_TYPE_H=\"modules/ahrs/ahrs_float_dcm_wrapper.h\"
$(TARGET).CFLAGS += -DSECONDARY_AHRS=ahrs_dcm
else
# this is the primary AHRS
$(TARGET).CFLAGS += -DAHRS_TYPE_H=\"modules/ahrs/ahrs_float_dcm_wrapper.h\"
$(TARGET).CFLAGS += -DPRIMARY_AHRS=ahrs_dcm
endif
else
# plain old single AHRS usage
$(TARGET).CFLAGS += -DAHRS_TYPE_H=\"modules/ahrs/ahrs_float_dcm_wrapper.h\"
endif
ifdef AHRS_MAG_CORRECT_FREQUENCY
nps.CFLAGS += -DAHRS_MAG_CORRECT_FREQUENCY=$(AHRS_MAG_CORRECT_FREQUENCY)
endif
ifdef AHRS_CORRECT_FREQUENCY
nps.CFLAGS += -DAHRS_CORRECT_FREQUENCY=$(AHRS_CORRECT_FREQUENCY)
endif
ifdef AHRS_PROPAGATE_FREQUENCY
nps.CFLAGS += -DAHRS_PROPAGATE_FREQUENCY=$(AHRS_PROPAGATE_FREQUENCY)
endif
ifeq ($(WIND_INFO), TRUE)
nps.CFLAGS += -DWIND_INFO
endif
nps.CFLAGS += -DPERIODIC_FREQUENCY=$(PERIODIC_FREQUENCY)
nps.CFLAGS += -DFIXEDWING_FIRMWARE
nps.CFLAGS += -I$(SRC_FIRMWARE)

ifeq ($(RTOS), chibios)
nps.srcs += main_chibios.c
endif

ifneq ($(RTOS), chibios)
nps.srcs += main_bare.c
endif
nps.srcs += main_ap.c
nps.CFLAGS += -DAP
nps.srcs += nps/nps_autopilot_fixedwing.c
nps.CFLAGS += -DSITL
nps.CFLAGS += -DAP
nps.srcs += $(NPS_DIR)/nps_main_sitl.c
nps.srcs += $(NPS_DIR)/nps_radio_control_spektrum.c
nps.srcs += $(NPS_DIR)/nps_radio_control_joystick.c
nps.srcs += $(NPS_DIR)/nps_radio_control.c
nps.srcs += $(NPS_DIR)/nps_electrical.c

endif # end of target 'nps'

