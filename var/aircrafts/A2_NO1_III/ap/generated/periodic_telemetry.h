/* This file has been generated by gen_periodic */
/* Version v6.4.0_stable */
/* Please DO NOT EDIT */

#ifndef _VAR_PERIODIC_H_
#define _VAR_PERIODIC_H_

#include "std.h"
#include "generated/airframe.h"
#include "modules/datalink/telemetry_common.h"

#ifndef TELEMETRY_FREQUENCY
#ifdef PERIODIC_FREQUENCY
#define TELEMETRY_FREQUENCY PERIODIC_FREQUENCY
#else
#error "neither TELEMETRY_FREQUENCY or PERIODIC_FREQUENCY are defined"
#endif
#endif

/* Periodic telemetry messages of type PPRZ */
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX 0
#define TELEMETRY_PPRZ_MSG_DESIRED_IDX 1
#define TELEMETRY_PPRZ_MSG_PPM_IDX 2
#define TELEMETRY_PPRZ_MSG_GPS_SOL_IDX 3
#define TELEMETRY_PPRZ_MSG_AIR_DATA_IDX 4
#define TELEMETRY_PPRZ_MSG_ENERGY_IDX 5
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX 6
#define TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX 7
#define TELEMETRY_PPRZ_MSG_ADC_GENERIC_IDX 8
#define TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX 9
#define TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX 10
#define TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX 11
#define TELEMETRY_PPRZ_MSG_BARO_RAW_IDX 12
#define TELEMETRY_PPRZ_MSG_IMU_MAG_IDX 13
#define TELEMETRY_PPRZ_MSG_SEGMENT_IDX 14
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX 15
#define TELEMETRY_PPRZ_MSG_CAM_IDX 16
#define TELEMETRY_PPRZ_MSG_SETTINGS_IDX 17
#define TELEMETRY_PPRZ_MSG_ATTITUDE_IDX 18
#define TELEMETRY_PPRZ_MSG_RC_IDX 19
#define TELEMETRY_PPRZ_MSG_COMMANDS_IDX 20
#define TELEMETRY_PPRZ_MSG_WP_MOVED_IDX 21
#define TELEMETRY_PPRZ_MSG_ACTUATORS_IDX 22
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX 23
#define TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX 24
#define TELEMETRY_PPRZ_MSG_SURVEY_IDX 25
#define TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX 26
#define TELEMETRY_PPRZ_MSG_ESC_IDX 27
#define TELEMETRY_PPRZ_MSG_AIRSPEED_IDX 28
#define TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX 29
#define TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX 30
#define TELEMETRY_PPRZ_MSG_GPS_IDX 31
#define TELEMETRY_PPRZ_MSG_ALIVE_IDX 32
#define TELEMETRY_PPRZ_MSG_CALIBRATION_IDX 33
#define TELEMETRY_PPRZ_MSG_NAVIGATION_IDX 34
#define TELEMETRY_PPRZ_MSG_AOA_IDX 35
#define TELEMETRY_PPRZ_MSG_CAM_POINT_IDX 36
#define TELEMETRY_PPRZ_MSG_DL_VALUE_IDX 37
#define TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX 38
#define TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX 39
#define TELEMETRY_PPRZ_MSG_CIRCLE_IDX 40
#define TELEMETRY_PPRZ_NB_MSG 41

#define TELEMETRY_PPRZ_MSG_NAMES { \
  "IMU_ACCEL_RAW", \
  "DESIRED", \
  "PPM", \
  "GPS_SOL", \
  "AIR_DATA", \
  "ENERGY", \
  "IMU_GYRO", \
  "PPRZ_MODE", \
  "ADC_GENERIC", \
  "AUTOPILOT_VERSION", \
  "LOGGER_STATUS", \
  "STATE_FILTER_STATUS", \
  "BARO_RAW", \
  "IMU_MAG", \
  "SEGMENT", \
  "IMU_ACCEL", \
  "CAM", \
  "SETTINGS", \
  "ATTITUDE", \
  "RC", \
  "COMMANDS", \
  "WP_MOVED", \
  "ACTUATORS", \
  "IMU_GYRO_RAW", \
  "WIND_INFO_RET", \
  "SURVEY", \
  "FBW_STATUS", \
  "ESC", \
  "AIRSPEED", \
  "IMU_MAG_RAW", \
  "ESTIMATOR", \
  "GPS", \
  "ALIVE", \
  "CALIBRATION", \
  "NAVIGATION", \
  "AOA", \
  "CAM_POINT", \
  "DL_VALUE", \
  "DATALINK_REPORT", \
  "NAVIGATION_REF", \
  "CIRCLE", \
}

#define TELEMETRY_PPRZ_CBS { \
  {.id=PPRZ_MSG_ID_IMU_ACCEL_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DESIRED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_PPM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GPS_SOL, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AIR_DATA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ENERGY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_PPRZ_MODE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ADC_GENERIC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AUTOPILOT_VERSION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_LOGGER_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STATE_FILTER_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_BARO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SEGMENT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_ACCEL, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CAM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SETTINGS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ATTITUDE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_RC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_COMMANDS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_WP_MOVED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ACTUATORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_WIND_INFO_RET, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SURVEY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_FBW_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ESC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AIRSPEED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ESTIMATOR, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GPS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ALIVE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CALIBRATION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_NAVIGATION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AOA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CAM_POINT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DL_VALUE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DATALINK_REPORT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_NAVIGATION_REF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_CIRCLE, .slots={ NULL }}, \
}


/* Number of processes in telemetry file */
#define TELEMETRY_PROCESS_NB 3

/* Periodic telemetry (type PPRZ): Ap process */
#define TELEMETRY_PROCESS_Ap 0
#define TELEMETRY_MODE_Ap_default 0
#define PERIOD_AUTOPILOT_VERSION_Ap_0 (11.1)
#define PERIOD_AIRSPEED_Ap_0 (1)
#define PERIOD_ALIVE_Ap_0 (5.1)
#define PERIOD_GPS_Ap_0 (0.25)
#define PERIOD_NAVIGATION_Ap_0 (1.)
#define PERIOD_ATTITUDE_Ap_0 (0.1)
#define PERIOD_ESTIMATOR_Ap_0 (0.5)
#define PERIOD_ENERGY_Ap_0 (1.1)
#define PERIOD_WP_MOVED_Ap_0 (0.5)
#define PERIOD_CIRCLE_Ap_0 (1.05)
#define PERIOD_DESIRED_Ap_0 (0.2)
#define PERIOD_SEGMENT_Ap_0 (1.2)
#define PERIOD_CALIBRATION_Ap_0 (2.1)
#define PERIOD_NAVIGATION_REF_Ap_0 (9.)
#define PERIOD_PPRZ_MODE_Ap_0 (4.9)
#define PERIOD_SETTINGS_Ap_0 (5.)
#define PERIOD_STATE_FILTER_STATUS_Ap_0 (2.2)
#define PERIOD_DATALINK_REPORT_Ap_0 (5.1)
#define PERIOD_DL_VALUE_Ap_0 (1.5)
#define PERIOD_SURVEY_Ap_0 (2.1)
#define PERIOD_GPS_SOL_Ap_0 (2.0)
#define PERIOD_IMU_ACCEL_Ap_0 (.8)
#define PERIOD_IMU_GYRO_Ap_0 (.6)
#define PERIOD_IMU_MAG_Ap_0 (1.3)
#define PERIOD_CAM_Ap_0 (0.5)
#define PERIOD_CAM_POINT_Ap_0 (1.0)
#define PERIOD_COMMANDS_Ap_0 (5)
#define PERIOD_FBW_STATUS_Ap_0 (2)
#define PERIOD_AIR_DATA_Ap_0 (1.3)
#define PERIOD_ESC_Ap_0 (0.9)
#define PERIOD_LOGGER_STATUS_Ap_0 (5.1)
#define PERIOD_WIND_INFO_RET_Ap_0 (0.1)
#define TELEMETRY_MODE_Ap_minimal 1
#define PERIOD_ALIVE_Ap_1 (5)
#define PERIOD_ATTITUDE_Ap_1 (4)
#define PERIOD_GPS_Ap_1 (1.05)
#define PERIOD_ESTIMATOR_Ap_1 (1.3)
#define PERIOD_WP_MOVED_Ap_1 (1.4)
#define PERIOD_CIRCLE_Ap_1 (3.05)
#define PERIOD_DESIRED_Ap_1 (4.05)
#define PERIOD_ENERGY_Ap_1 (1.1)
#define PERIOD_SEGMENT_Ap_1 (3.2)
#define PERIOD_CALIBRATION_Ap_1 (5.1)
#define PERIOD_NAVIGATION_REF_Ap_1 (9.)
#define PERIOD_NAVIGATION_Ap_1 (3.)
#define PERIOD_PPRZ_MODE_Ap_1 (5.)
#define PERIOD_STATE_FILTER_STATUS_Ap_1 (5.)
#define PERIOD_DATALINK_REPORT_Ap_1 (5.1)
#define PERIOD_DL_VALUE_Ap_1 (1.5)
#define PERIOD_SURVEY_Ap_1 (2.1)
#define PERIOD_GPS_SOL_Ap_1 (5.0)
#define TELEMETRY_MODE_Ap_extremal 2
#define PERIOD_ALIVE_Ap_2 (5)
#define PERIOD_GPS_Ap_2 (5.1)
#define PERIOD_ESTIMATOR_Ap_2 (5.3)
#define PERIOD_ENERGY_Ap_2 (10.1)
#define PERIOD_DESIRED_Ap_2 (10.2)
#define PERIOD_NAVIGATION_Ap_2 (5.4)
#define PERIOD_PPRZ_MODE_Ap_2 (7.5)
#define PERIOD_STATE_FILTER_STATUS_Ap_2 (8.)
#define PERIOD_DATALINK_REPORT_Ap_2 (5.7)
#define TELEMETRY_MODE_Ap_raw_sensors 3
#define PERIOD_DL_VALUE_Ap_3 (0.5)
#define PERIOD_ALIVE_Ap_3 (2.1)
#define PERIOD_IMU_ACCEL_RAW_Ap_3 (.05)
#define PERIOD_IMU_GYRO_RAW_Ap_3 (.05)
#define PERIOD_IMU_MAG_RAW_Ap_3 (.05)
#define PERIOD_BARO_RAW_Ap_3 (0.5)
#define TELEMETRY_MODE_Ap_scaled_sensors 4
#define PERIOD_DL_VALUE_Ap_4 (0.5)
#define PERIOD_ALIVE_Ap_4 (2.1)
#define PERIOD_IMU_GYRO_Ap_4 (.075)
#define PERIOD_IMU_ACCEL_Ap_4 (.075)
#define PERIOD_IMU_MAG_Ap_4 (.1)
#define TELEMETRY_MODE_Ap_debug_imu 5
#define PERIOD_ATTITUDE_Ap_5 (0.1)
#define PERIOD_ALIVE_Ap_5 (5)
#define PERIOD_GPS_Ap_5 (5.1)
#define PERIOD_ESTIMATOR_Ap_5 (5.3)
#define PERIOD_ENERGY_Ap_5 (10.1)
#define PERIOD_DESIRED_Ap_5 (10.2)
#define PERIOD_NAVIGATION_Ap_5 (5.4)
#define PERIOD_PPRZ_MODE_Ap_5 (5.5)
#define PERIOD_STATE_FILTER_STATUS_Ap_5 (5.)
#define PERIOD_DATALINK_REPORT_Ap_5 (5.7)
#define PERIOD_IMU_ACCEL_Ap_5 (.5)
#define PERIOD_IMU_GYRO_Ap_5 (.5)
#define PERIOD_IMU_MAG_Ap_5 (.5)
#define PERIOD_IMU_ACCEL_RAW_Ap_5 (.5)
#define PERIOD_IMU_GYRO_RAW_Ap_5 (.5)
#define PERIOD_IMU_MAG_RAW_Ap_5 (.5)

/* Functions for Ap process */
#ifdef PERIODIC_C_AP
#ifndef TELEMETRY_MODE_AP
#define TELEMETRY_MODE_AP 0
#endif
uint8_t telemetry_mode_Ap = TELEMETRY_MODE_AP;
#else /* PERIODIC_C_AP not defined (general header) */
extern uint8_t telemetry_mode_Ap;
#endif /* PERIODIC_C_AP */
static inline void periodic_telemetry_send_Ap(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_default) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*11.1)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*0.25)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*1.)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*0.1)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*1.1)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*1.05)) i9=0;
    static uint32_t i10 = 0; i10++; if (i10>= (uint32_t)(TELEMETRY_FREQUENCY*0.2)) i10=0;
    static uint32_t i11 = 0; i11++; if (i11>= (uint32_t)(TELEMETRY_FREQUENCY*1.2)) i11=0;
    static uint32_t i12 = 0; i12++; if (i12>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i12=0;
    static uint32_t i13 = 0; i13++; if (i13>= (uint32_t)(TELEMETRY_FREQUENCY*9.)) i13=0;
    static uint32_t i14 = 0; i14++; if (i14>= (uint32_t)(TELEMETRY_FREQUENCY*4.9)) i14=0;
    static uint32_t i15 = 0; i15++; if (i15>= (uint32_t)(TELEMETRY_FREQUENCY*5.)) i15=0;
    static uint32_t i16 = 0; i16++; if (i16>= (uint32_t)(TELEMETRY_FREQUENCY*2.2)) i16=0;
    static uint32_t i17 = 0; i17++; if (i17>= (uint32_t)(TELEMETRY_FREQUENCY*1.5)) i17=0;
    static uint32_t i18 = 0; i18++; if (i18>= (uint32_t)(TELEMETRY_FREQUENCY*2.0)) i18=0;
    static uint32_t i19 = 0; i19++; if (i19>= (uint32_t)(TELEMETRY_FREQUENCY*.8)) i19=0;
    static uint32_t i20 = 0; i20++; if (i20>= (uint32_t)(TELEMETRY_FREQUENCY*.6)) i20=0;
    static uint32_t i21 = 0; i21++; if (i21>= (uint32_t)(TELEMETRY_FREQUENCY*1.3)) i21=0;
    static uint32_t i22 = 0; i22++; if (i22>= (uint32_t)(TELEMETRY_FREQUENCY*1.0)) i22=0;
    static uint32_t i23 = 0; i23++; if (i23>= (uint32_t)(TELEMETRY_FREQUENCY*5)) i23=0;
    static uint32_t i24 = 0; i24++; if (i24>= (uint32_t)(TELEMETRY_FREQUENCY*2)) i24=0;
    static uint32_t i25 = 0; i25++; if (i25>= (uint32_t)(TELEMETRY_FREQUENCY*0.9)) i25=0;
    uint8_t j;
    if (i13 == (uint32_t)(TELEMETRY_FREQUENCY*9.*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION_REF);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_LOGGER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_LOGGER_STATUS);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i15 == (uint32_t)(TELEMETRY_FREQUENCY*5.*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SETTINGS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SETTINGS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SETTINGS);
#endif
    }
    if (i23 == (uint32_t)(TELEMETRY_FREQUENCY*5*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    if (i14 == (uint32_t)(TELEMETRY_FREQUENCY*4.9*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i16 == (uint32_t)(TELEMETRY_FREQUENCY*2.2*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i12 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SURVEY);
#endif
    }
    if (i12 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CALIBRATION);
#endif
    }
    if (i18 == (uint32_t)(TELEMETRY_FREQUENCY*2.0*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS_SOL);
#endif
    }
    if (i24 == (uint32_t)(TELEMETRY_FREQUENCY*2*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*11.1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_AUTOPILOT_VERSION);
#endif
    }
    if (i17 == (uint32_t)(TELEMETRY_FREQUENCY*1.5*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i21 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    if (i21 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*1.2*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SEGMENT);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*1.1*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*1.05*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CIRCLE);
#endif
    }
    if (i22 == (uint32_t)(TELEMETRY_FREQUENCY*1.0*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_POINT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_POINT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CAM_POINT);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIRSPEED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIRSPEED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_AIRSPEED);
#endif
    }
    if (i25 == (uint32_t)(TELEMETRY_FREQUENCY*0.9*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESC);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CAM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CAM);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*0.25*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*0.2*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*0.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_WIND_INFO_RET);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*0.1*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
    if (i19 == (uint32_t)(TELEMETRY_FREQUENCY*.8*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
    if (i20 == (uint32_t)(TELEMETRY_FREQUENCY*.6*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_minimal) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*4)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*1.05)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*1.3)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*1.4)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*3.05)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*4.05)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*1.1)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*3.2)) i9=0;
    static uint32_t i10 = 0; i10++; if (i10>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i10=0;
    static uint32_t i11 = 0; i11++; if (i11>= (uint32_t)(TELEMETRY_FREQUENCY*9.)) i11=0;
    static uint32_t i12 = 0; i12++; if (i12>= (uint32_t)(TELEMETRY_FREQUENCY*3.)) i12=0;
    static uint32_t i13 = 0; i13++; if (i13>= (uint32_t)(TELEMETRY_FREQUENCY*5.)) i13=0;
    static uint32_t i14 = 0; i14++; if (i14>= (uint32_t)(TELEMETRY_FREQUENCY*1.5)) i14=0;
    static uint32_t i15 = 0; i15++; if (i15>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i15=0;
    static uint32_t i16 = 0; i16++; if (i16>= (uint32_t)(TELEMETRY_FREQUENCY*5.0)) i16=0;
    uint8_t j;
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*9.*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION_REF);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CALIBRATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CALIBRATION);
#endif
    }
    if (i16 == (uint32_t)(TELEMETRY_FREQUENCY*5.0*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_SOL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS_SOL);
#endif
    }
    if (i13 == (uint32_t)(TELEMETRY_FREQUENCY*5.*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i13 == (uint32_t)(TELEMETRY_FREQUENCY*5.*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*4.05*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*4*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*3.2*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SEGMENT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SEGMENT);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*3.05*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_CIRCLE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_CIRCLE);
#endif
    }
    if (i12 == (uint32_t)(TELEMETRY_FREQUENCY*3.*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i15 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_SURVEY);
#endif
    }
    if (i14 == (uint32_t)(TELEMETRY_FREQUENCY*1.5*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.4*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*1.3*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*1.1*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*1.05*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_extremal) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*5.3)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*10.1)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*10.2)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*5.4)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*7.5)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*8.)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*5.7)) i9=0;
    uint8_t j;
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*8.*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*7.5*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*5.7*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*5.4*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*5.3*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*10.2*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*10.1*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_raw_sensors) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*.05)) i3=0;
    uint8_t j;
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_BARO_RAW);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG_RAW);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO_RAW);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*.05*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL_RAW);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_scaled_sensors) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*2.1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*.075)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*.1)) i4=0;
    uint8_t j;
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*2.1*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.1*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*.075*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*.075*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
  }
  if (telemetry_mode_Ap == TELEMETRY_MODE_Ap_debug_imu) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.1)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*5)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*5.1)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*5.3)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*10.1)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*10.2)) i6=0;
    static uint32_t i7 = 0; i7++; if (i7>= (uint32_t)(TELEMETRY_FREQUENCY*5.4)) i7=0;
    static uint32_t i8 = 0; i8++; if (i8>= (uint32_t)(TELEMETRY_FREQUENCY*5.5)) i8=0;
    static uint32_t i9 = 0; i9++; if (i9>= (uint32_t)(TELEMETRY_FREQUENCY*5.)) i9=0;
    static uint32_t i10 = 0; i10++; if (i10>= (uint32_t)(TELEMETRY_FREQUENCY*5.7)) i10=0;
    static uint32_t i11 = 0; i11++; if (i11>= (uint32_t)(TELEMETRY_FREQUENCY*.5)) i11=0;
    uint8_t j;
    if (i10 == (uint32_t)(TELEMETRY_FREQUENCY*5.7*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i8 == (uint32_t)(TELEMETRY_FREQUENCY*5.5*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i7 == (uint32_t)(TELEMETRY_FREQUENCY*5.4*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*5.3*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESTIMATOR_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ESTIMATOR);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*5.1*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i9 == (uint32_t)(TELEMETRY_FREQUENCY*5.*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*10.2*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*10.1*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.1*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*.5*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG_RAW);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*.5*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO_RAW);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*.5*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL_RAW);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*.5*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
    if (i11 == (uint32_t)(TELEMETRY_FREQUENCY*.5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Ap, telemetry_mode_Ap, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
  }
}

/* Periodic telemetry (type PPRZ): Fbw process */
#define TELEMETRY_PROCESS_Fbw 1
#define TELEMETRY_MODE_Fbw_default 0
#define PERIOD_COMMANDS_Fbw_0 (5)
#define PERIOD_FBW_STATUS_Fbw_0 (2)
#define PERIOD_ACTUATORS_Fbw_0 (5)
#define TELEMETRY_MODE_Fbw_debug 1
#define PERIOD_PPM_Fbw_1 (0.5)
#define PERIOD_RC_Fbw_1 (0.5)
#define PERIOD_COMMANDS_Fbw_1 (0.5)
#define PERIOD_FBW_STATUS_Fbw_1 (1)
#define PERIOD_ACTUATORS_Fbw_1 (5)

/* Functions for Fbw process */
#ifdef PERIODIC_C_FBW
#ifndef TELEMETRY_MODE_FBW
#define TELEMETRY_MODE_FBW 0
#endif
uint8_t telemetry_mode_Fbw = TELEMETRY_MODE_FBW;
#else /* PERIODIC_C_FBW not defined (general header) */
extern uint8_t telemetry_mode_Fbw;
#endif /* PERIODIC_C_FBW */
static inline void periodic_telemetry_send_Fbw(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {
  if (telemetry_mode_Fbw == TELEMETRY_MODE_Fbw_default) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*2)) i2=0;
    uint8_t j;
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*5*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_ACTUATORS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*2*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
  }
  if (telemetry_mode_Fbw == TELEMETRY_MODE_Fbw_debug) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*1)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*5)) i3=0;
    uint8_t j;
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*5*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_ACTUATORS);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*1*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_RC);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Fbw, telemetry_mode_Fbw, PPRZ_MSG_ID_PPM);
#endif
    }
  }
}

/* Periodic telemetry (type PPRZ): FlightRecorder process */
#define TELEMETRY_PROCESS_FlightRecorder 2
#define TELEMETRY_MODE_FlightRecorder_default 0
#define PERIOD_ENERGY_FlightRecorder_0 (0.5)
#define PERIOD_GPS_FlightRecorder_0 (0.2)
#define PERIOD_ATTITUDE_FlightRecorder_0 (0.05)
#define PERIOD_DESIRED_FlightRecorder_0 (0.05)
#define PERIOD_IMU_ACCEL_FlightRecorder_0 (.02)
#define PERIOD_IMU_GYRO_FlightRecorder_0 (.02)
#define PERIOD_IMU_MAG_FlightRecorder_0 (.02)
#define PERIOD_AIR_DATA_FlightRecorder_0 (0.05)
#define PERIOD_AOA_FlightRecorder_0 (0.05)
#define PERIOD_RC_FlightRecorder_0 (0.05)
#define PERIOD_COMMANDS_FlightRecorder_0 (0.05)
#define PERIOD_ACTUATORS_FlightRecorder_0 (0.05)
#define PERIOD_PPRZ_MODE_FlightRecorder_0 (1.0)
#define PERIOD_FBW_STATUS_FlightRecorder_0 (1.0)
#define PERIOD_NAVIGATION_FlightRecorder_0 (1.0)
#define PERIOD_DATALINK_REPORT_FlightRecorder_0 (1.0)
#define PERIOD_ESC_FlightRecorder_0 (0.1)
#define PERIOD_ADC_GENERIC_FlightRecorder_0 (0.05)
#define PERIOD_WIND_INFO_RET_FlightRecorder_0 (0.1)

/* Functions for FlightRecorder process */
#ifdef PERIODIC_C_FLIGHTRECORDER
#ifndef TELEMETRY_MODE_FLIGHTRECORDER
#define TELEMETRY_MODE_FLIGHTRECORDER 0
#endif
uint8_t telemetry_mode_FlightRecorder = TELEMETRY_MODE_FLIGHTRECORDER;
#else /* PERIODIC_C_FLIGHTRECORDER not defined (general header) */
extern uint8_t telemetry_mode_FlightRecorder;
#endif /* PERIODIC_C_FLIGHTRECORDER */
static inline void periodic_telemetry_send_FlightRecorder(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {
  if (telemetry_mode_FlightRecorder == TELEMETRY_MODE_FlightRecorder_default) {
    static uint32_t i1 = 0; i1++; if (i1>= (uint32_t)(TELEMETRY_FREQUENCY*0.5)) i1=0;
    static uint32_t i2 = 0; i2++; if (i2>= (uint32_t)(TELEMETRY_FREQUENCY*0.2)) i2=0;
    static uint32_t i3 = 0; i3++; if (i3>= (uint32_t)(TELEMETRY_FREQUENCY*0.05)) i3=0;
    static uint32_t i4 = 0; i4++; if (i4>= (uint32_t)(TELEMETRY_FREQUENCY*.02)) i4=0;
    static uint32_t i5 = 0; i5++; if (i5>= (uint32_t)(TELEMETRY_FREQUENCY*1.0)) i5=0;
    static uint32_t i6 = 0; i6++; if (i6>= (uint32_t)(TELEMETRY_FREQUENCY*0.1)) i6=0;
    uint8_t j;
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.0*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.0*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_NAVIGATION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_NAVIGATION);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.0*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FBW_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_FBW_STATUS);
#endif
    }
    if (i5 == (uint32_t)(TELEMETRY_FREQUENCY*1.0*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPRZ_MODE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_PPRZ_MODE);
#endif
    }
    if (i1 == (uint32_t)(TELEMETRY_FREQUENCY*0.5*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i2 == (uint32_t)(TELEMETRY_FREQUENCY*0.2*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_GPS);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*0.1*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WIND_INFO_RET_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_WIND_INFO_RET);
#endif
    }
    if (i6 == (uint32_t)(TELEMETRY_FREQUENCY*0.1*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ESC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ESC);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ADC_GENERIC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ADC_GENERIC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ADC_GENERIC);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.200000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ACTUATORS);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.100000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_COMMANDS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_COMMANDS);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.000000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_RC);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.900000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AOA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AOA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_AOA);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.800000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.400000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DESIRED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_DESIRED);
#endif
    }
    if (i3 == (uint32_t)(TELEMETRY_FREQUENCY*0.05*0.300000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ATTITUDE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_ATTITUDE);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.02*0.700000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_MAG);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.02*0.600000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_GYRO);
#endif
    }
    if (i4 == (uint32_t)(TELEMETRY_FREQUENCY*.02*0.500000)) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_FlightRecorder, telemetry_mode_FlightRecorder, PPRZ_MSG_ID_IMU_ACCEL);
#endif
    }
  }
}
#endif // _VAR_PERIODIC_H_
